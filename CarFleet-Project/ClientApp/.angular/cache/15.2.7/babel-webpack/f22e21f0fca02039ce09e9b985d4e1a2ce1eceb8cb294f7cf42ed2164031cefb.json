{"ast":null,"code":"import { __decorate } from \"tslib\";\n/* eslint-disable @angular-eslint/component-selector */\n/* eslint-disable no-debugger */\nimport { Component } from '@angular/core';\nimport { Vehicle } from '../../models/Vehicle';\nimport { FormGroup, Validators, FormControl } from '@angular/forms';\nimport { ReplaySubject, takeUntil } from 'rxjs';\nlet NewCarComponent = class NewCarComponent {\n  displaySelectOptions() {\n    this.optionsHidden ? this.optionsHidden = false : this.optionsHidden = true;\n  }\n  updateChoosenFuels(formControlName) {\n    if (this.addCarForm.get('fuels').get(formControlName).value) {\n      this.choosenFuels.push(formControlName);\n    } else {\n      const index = this.choosenFuels.indexOf(formControlName, 0);\n      if (index > -1) {\n        this.choosenFuels.splice(index, 1);\n      }\n    }\n  }\n  updateValue(opElement) {\n    if (opElement.isChecked === false) {\n      opElement.isChecked = true;\n    } else {\n      opElement.isChecked = false;\n    }\n  }\n  constructor(addCarService, getEquipmentElementsService, formBuilder, getFiltersService, renderer, elRef) {\n    this.addCarService = addCarService;\n    this.getEquipmentElementsService = getEquipmentElementsService;\n    this.formBuilder = formBuilder;\n    this.getFiltersService = getFiltersService;\n    this.renderer = renderer;\n    this.elRef = elRef;\n    this.isExpanded = false;\n    this.addCarForm = new FormGroup({});\n    this.equipment = []; //Whole equipment elements\n    this.operationalEquipment = []; //Elements which are available in the car\n    this.vehicleImages = []; //Photos of the car\n    this.choosenFuels = [];\n    this.brands = [];\n    this.models = [];\n    this.fuels = [];\n    this.carbodies = [];\n    this.transmissionTypes = [];\n    this.years = [];\n    this.onDestroy$ = new ReplaySubject(1);\n    this.optionsHidden = true;\n  }\n  ngOnDestroy() {\n    this.onDestroy$.next(true);\n    this.onDestroy$.complete();\n  }\n  ngOnInit() {\n    this.initForm();\n    this.getEquipmentElementsService.getEquipmentElements().pipe(takeUntil(this.onDestroy$)).subscribe({\n      next: r => {\n        this.equipment = r;\n        for (const el of this.equipment) {\n          this.operationalEquipment.push({\n            eqElement: el,\n            isChecked: false\n          });\n        }\n      },\n      error: err => {\n        console.log(\"error\", err);\n      }\n    }), this.getFiltersService.getCarbodies().pipe(takeUntil(this.onDestroy$)).subscribe({\n      next: r => {\n        this.carbodies = r;\n      },\n      error: err => {\n        console.log(\"error\", err);\n      }\n    });\n    this.getFiltersService.getFuels().pipe(takeUntil(this.onDestroy$)).subscribe({\n      next: r => {\n        this.fuels = r;\n      },\n      error: err => {\n        console.log(\"error\", err);\n      }\n    });\n    this.getFiltersService.getTransmissionTypes().pipe(takeUntil(this.onDestroy$)).subscribe({\n      next: r => {\n        this.transmissionTypes = r;\n      },\n      error: err => {\n        console.log(\"error\", err);\n      }\n    }), this.getFiltersService.getModels().pipe(takeUntil(this.onDestroy$)).subscribe({\n      next: r => {\n        this.models = r;\n      },\n      error: err => {\n        console.log(\"error\", err);\n      }\n    }), this.getFiltersService.getBrands().pipe(takeUntil(this.onDestroy$)).subscribe({\n      next: r => {\n        this.brands = r;\n      },\n      error: err => {\n        console.log(\"error\", err);\n      }\n    });\n    this.getFiltersService.getYears().pipe(takeUntil(this.onDestroy$)).subscribe({\n      next: r => {\n        this.years = r;\n      },\n      error: err => {\n        console.log(\"error\", err);\n      }\n    });\n  }\n  initForm() {\n    this.addCarForm = this.formBuilder.group({\n      brand: ['', Validators.required],\n      model: ['', Validators.required],\n      yearOfProduction: ['', Validators.required],\n      mileage: ['', Validators.required],\n      carbodyType: ['', Validators.required],\n      transmissionType: ['', Validators.required],\n      vehicleImage: [null, Validators.required]\n    });\n    this.addCarForm.addControl('fuelsOptions', new FormGroup({}));\n    const fuelsTemp = this.addCarForm.controls.fuels;\n    for (const fuel of this.fuels) {\n      fuelsTemp.addControl(fuel.fuelName, new FormControl(false));\n    }\n  }\n  fileChanged(event) {\n    const imageInputElement = event.target;\n    if (imageInputElement.files && imageInputElement.files.length > 0) {\n      const files = imageInputElement.files;\n      for (const file of files) {\n        this.vehicleImages.push(file);\n      }\n    }\n  }\n  submitForm() {\n    if (this.addCarForm.valid) {\n      const formData = this.addCarForm.value;\n      const newVehicle = new Vehicle();\n      newVehicle.brandId = this.brands.find(brand => brand.brandName === formData.brand).brandId;\n      newVehicle.modelId = this.models.find(model => model.modelName === formData.model).modelId;\n      newVehicle.yearOfProductionId = this.years.find(year => year.year === formData.yearOfProduction).yearId;\n      newVehicle.mileage = formData.mileage;\n      formData.fuels.forEach(f1 => {\n        const matchingFuel = this.fuels.find(f2 => f2.fuelName === f1);\n        if (matchingFuel) {\n          newVehicle.fuels.push(matchingFuel);\n        }\n      });\n      newVehicle.carbodyId = this.carbodies.find(c => c.carbodyName === formData.carBodyType).carbodyId;\n      for (const opElement of this.operationalEquipment) {\n        if (opElement.isChecked === true) {\n          const matchingEquipmentElement = this.equipment.find(ee => ee.elementId === opElement.eqElement.elementId);\n          if (matchingEquipmentElement) {\n            newVehicle.equipment.push(matchingEquipmentElement);\n          }\n        }\n      }\n      this.addCarService.addVehicle(newVehicle).pipe(takeUntil(this.onDestroy$)).subscribe({\n        next: r => {\n          debugger;\n        },\n        error: err => {\n          console.log(\"błąd\"), console.log(err);\n        }\n      });\n    } else {\n      console.log(\"Form is not valid!!!\");\n      this.getFormValidationErrors();\n    }\n  }\n  getFormValidationErrors() {\n    Object.keys(this.addCarForm.controls).forEach((key, value) => {\n      const controlErrors = this.addCarForm.get(key).errors;\n      Object.keys(controlErrors || {}).forEach(keyError => {\n        console.log(`Key control: ${key}, keyError: ${keyError}, errValue: ${controlErrors[keyError]}`);\n      });\n    });\n  }\n  collapse() {\n    this.isExpanded = false;\n  }\n  toggle() {\n    this.isExpanded = !this.isExpanded;\n  }\n};\nNewCarComponent = __decorate([Component({\n  selector: 'new-car',\n  templateUrl: './new-car.component.html',\n  styleUrls: ['./new-car.component.css']\n})], NewCarComponent);\nexport { NewCarComponent };","map":{"version":3,"mappings":"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","names":["Component","Vehicle","FormGroup","Validators","FormControl","ReplaySubject","takeUntil","NewCarComponent","displaySelectOptions","optionsHidden","updateChoosenFuels","formControlName","addCarForm","get","value","choosenFuels","push","index","indexOf","splice","updateValue","opElement","isChecked","constructor","addCarService","getEquipmentElementsService","formBuilder","getFiltersService","renderer","elRef","ngOnDestroy","onDestroy$","next","complete","ngOnInit","initForm","getEquipmentElements","pipe","subscribe","r","equipment","el","operationalEquipment","eqElement","error","err","console","log","getCarbodies","carbodies","getFuels","fuels","getTransmissionTypes","transmissionTypes","getModels","models","getBrands","brands","getYears","years","group","brand","required","model","yearOfProduction","mileage","carbodyType","transmissionType","vehicleImage","addControl","fuelsTemp","controls","fuel","fuelName","fileChanged","event","imageInputElement","target","files","length","file","vehicleImages","submitForm","valid","formData","newVehicle","brandId","find","brandName","modelId","modelName","yearOfProductionId","year","yearId","forEach","f1","matchingFuel","f2","carbodyId","c","carbodyName","carBodyType","matchingEquipmentElement","ee","elementId","addVehicle","getFormValidationErrors","Object","keys","key","controlErrors","errors","keyError","collapse","isExpanded","toggle","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\rutko\\source\\repos\\Car-Fleet-Management\\CarFleet-Project\\ClientApp\\src\\app\\new-car\\new-car.component.ts"],"sourcesContent":["/* eslint-disable @angular-eslint/component-selector */\r\n/* eslint-disable no-debugger */\r\nimport { Component, Renderer2, ElementRef, OnDestroy, OnInit } from '@angular/core';\r\nimport { VehiclesService } from '../../services/vehicles.service';\r\nimport { EquipmentService } from '../../services/equipment.service';\r\nimport { FiltersService } from '../../services/filters.service';\r\nimport { AddCarInterface } from '../../interfaces/add-car.interface';\r\nimport { Vehicle } from '../../models/Vehicle';\r\nimport { EquipmentElement } from '../../models/EquipmentElement';\r\nimport { FormBuilder, FormGroup, Validators, ValidationErrors, FormControl } from '@angular/forms';\r\nimport { ReplaySubject, takeUntil } from 'rxjs';\r\nimport { Brand } from '../../models/Brand';\r\nimport { Model } from '../../models/Model';\r\nimport { Fuel } from '../../models/Fuel';\r\nimport { Carbody } from '../../models/Carbody';\r\nimport { TransmissionType } from '../../models/TransmissionType';\r\nimport { OperationalEquipment } from '../../interfaces/operational-equipment.interface';\r\nimport { YearOfProduction } from '../../models/YearOfProduction';\r\n\r\n@Component({\r\n  selector: 'new-car',\r\n  templateUrl: './new-car.component.html',\r\n  styleUrls: ['./new-car.component.css'],\r\n})\r\nexport class NewCarComponent implements OnInit, OnDestroy {\r\n  private isExpanded = false;\r\n  public addCarForm: FormGroup = new FormGroup({});\r\n\r\n  private equipment: EquipmentElement[] = []; //Whole equipment elements\r\n  public operationalEquipment: OperationalEquipment[] = []; //Elements which are available in the car\r\n  public vehicleImages: File[] = []; //Photos of the car\r\n\r\n  public choosenFuels: string[] = [];\r\n\r\n  public brands: Brand[] = [];\r\n  public models: Model[] = [];\r\n  public fuels: Fuel[] = [];\r\n  public carbodies: Carbody[] = [];\r\n  public transmissionTypes: TransmissionType[] = [];\r\n  public years: YearOfProduction[] = [];\r\n\r\n  private onDestroy$: ReplaySubject<boolean> = new ReplaySubject<boolean>(1);\r\n\r\n  public optionsHidden = true;\r\n\r\n  displaySelectOptions() {\r\n    (this.optionsHidden) ? this.optionsHidden = false : this.optionsHidden = true;\r\n  }\r\n\r\n  updateChoosenFuels(formControlName: string) {\r\n    if (this.addCarForm.get('fuels')!.get(formControlName)!.value) {\r\n      this.choosenFuels.push(formControlName);\r\n    } else {\r\n      const index = this.choosenFuels.indexOf(formControlName, 0);\r\n      if (index > -1) {\r\n        this.choosenFuels.splice(index, 1);\r\n      }\r\n    }\r\n    \r\n  }\r\n\r\n  updateValue(opElement: OperationalEquipment) {\r\n    if (opElement.isChecked === false) {\r\n      opElement.isChecked = true;\r\n    } else {\r\n      opElement.isChecked = false;\r\n    }\r\n }\r\n\r\n  constructor(private addCarService: VehiclesService, private getEquipmentElementsService: EquipmentService,\r\n    private formBuilder: FormBuilder, private getFiltersService: FiltersService, private renderer: Renderer2, private elRef: ElementRef) {}\r\n\r\n  public ngOnDestroy(): void {\r\n    this.onDestroy$.next(true);\r\n    this.onDestroy$.complete();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.initForm();\r\n    this.getEquipmentElementsService.getEquipmentElements()\r\n      .pipe(takeUntil(this.onDestroy$))\r\n      .subscribe(\r\n        {\r\n          next: r => {\r\n            this.equipment = r;\r\n            for (const el of this.equipment) {\r\n              this.operationalEquipment.push({ eqElement: el, isChecked: false });\r\n            }\r\n          },\r\n          error: err => { console.log(\"error\", err); }\r\n      }), \r\n\r\n    this.getFiltersService.getCarbodies()\r\n      .pipe(takeUntil(this.onDestroy$))\r\n      .subscribe(\r\n        {\r\n          next: r => { this.carbodies = r; },\r\n          error: err => { console.log(\"error\", err); }\r\n        });\r\n\r\n    this.getFiltersService.getFuels()\r\n      .pipe(takeUntil(this.onDestroy$))\r\n      .subscribe(\r\n        {\r\n          next: r => { this.fuels = r; },\r\n          error: err => { console.log(\"error\", err); }\r\n        });\r\n\r\n    this.getFiltersService.getTransmissionTypes()\r\n      .pipe(takeUntil(this.onDestroy$))\r\n      .subscribe(\r\n        {\r\n          next: r => { this.transmissionTypes = r; },\r\n          error: err => { console.log(\"error\", err); }\r\n        }),\r\n\r\n      this.getFiltersService.getModels()\r\n        .pipe(takeUntil(this.onDestroy$))\r\n        .subscribe(\r\n          {\r\n            next: r => { this.models = r; },\r\n            error: err => { console.log(\"error\", err); }\r\n          }),\r\n\r\n      this.getFiltersService.getBrands()\r\n        .pipe(takeUntil(this.onDestroy$))\r\n        .subscribe(\r\n          {\r\n            next: r => { this.brands = r; },\r\n            error: err => { console.log(\"error\", err); }\r\n          })\r\n\r\n      this.getFiltersService.getYears()\r\n        .pipe(takeUntil(this.onDestroy$))\r\n        .subscribe(\r\n          {\r\n            next: r => { this.years = r; },\r\n            error: err => { console.log(\"error\", err); }\r\n          })\r\n  }\r\n\r\n  initForm() {\r\n    this.addCarForm = this.formBuilder.group({\r\n      brand: ['', Validators.required],\r\n      model: ['', Validators.required],\r\n      yearOfProduction: ['', Validators.required],\r\n      mileage: ['', Validators.required],\r\n      carbodyType: ['', Validators.required],\r\n      transmissionType: ['', Validators.required],\r\n      vehicleImage: [null, Validators.required]\r\n    });\r\n    this.addCarForm.addControl('fuelsOptions', new FormGroup({}));\r\n    const fuelsTemp: FormGroup = this.addCarForm.controls.fuels as FormGroup;\r\n    for (const fuel of this.fuels) {\r\n      fuelsTemp.addControl(fuel.fuelName, new FormControl(false));\r\n    }\r\n  }\r\n \r\n  fileChanged(event: Event) {\r\n    const imageInputElement = event.target as HTMLInputElement;\r\n    if (imageInputElement.files && imageInputElement.files.length > 0) {\r\n      const files = imageInputElement.files;\r\n      for (const file of files) {\r\n        this.vehicleImages.push(file);\r\n      }\r\n    }\r\n  }\r\n\r\n  submitForm() {\r\n    if (this.addCarForm.valid) {\r\n      const formData: AddCarInterface = this.addCarForm.value;\r\n      const newVehicle: Vehicle = new Vehicle();\r\n\r\n      newVehicle.brandId = this.brands.find(brand => brand.brandName === formData.brand)!.brandId!;\r\n      newVehicle.modelId = this.models.find(model => model.modelName === formData.model)!.modelId!;\r\n\r\n      newVehicle.yearOfProductionId = this.years.find(year => year.year === formData.yearOfProduction)!.yearId!;\r\n      newVehicle.mileage = formData.mileage;\r\n\r\n      formData.fuels.forEach(f1 => {\r\n        const matchingFuel = this.fuels.find(f2 => f2.fuelName === f1);\r\n        if (matchingFuel) {\r\n          newVehicle.fuels.push(matchingFuel);\r\n        }\r\n      })\r\n\r\n      newVehicle.carbodyId = this.carbodies.find(c => c.carbodyName === formData.carBodyType)!.carbodyId!;\r\n\r\n      for (const opElement of this.operationalEquipment) {\r\n        if (opElement.isChecked === true) {\r\n          const matchingEquipmentElement = this.equipment.find(ee => ee.elementId === opElement.eqElement.elementId);\r\n          if (matchingEquipmentElement) {\r\n            newVehicle.equipment.push(matchingEquipmentElement);\r\n          }\r\n        }\r\n      }\r\n      this.addCarService.addVehicle(newVehicle)\r\n        .pipe(takeUntil(this.onDestroy$))\r\n        .subscribe(\r\n          {\r\n            next: r => { debugger },\r\n            error: err => { console.log(\"błąd\"), console.log(err) }\r\n          });\r\n    }\r\n    else {\r\n      console.log(\"Form is not valid!!!\");\r\n      this.getFormValidationErrors();\r\n    } \r\n  }\r\n\r\n  getFormValidationErrors() {\r\n    Object.keys(this.addCarForm.controls).forEach((key,value) => {\r\n      const controlErrors: ValidationErrors = this.addCarForm.get(key)!.errors!;\r\n      Object.keys(controlErrors || {}).forEach(keyError => {\r\n        console.log(`Key control: ${key}, keyError: ${keyError}, errValue: ${controlErrors[keyError]}`);\r\n      });\r\n    });\r\n  }\r\n\r\n  collapse() {\r\n    this.isExpanded = false;\r\n  }\r\n\r\n  toggle() {\r\n    this.isExpanded = !this.isExpanded;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}