{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { ReplaySubject, takeUntil } from 'rxjs';\nlet FleetComponent = class FleetComponent {\n  ngOnDestroy() {\n    this.onDestroy$.next(true);\n    this.onDestroy$.complete();\n  }\n  constructor(getCarsService, getFiltersService, sanitizer) {\n    this.getCarsService = getCarsService;\n    this.getFiltersService = getFiltersService;\n    this.sanitizer = sanitizer;\n    this.mainBanner = 'assets/images/dope-cars-banner.png';\n    this.data = [];\n    this.priceTypes = [];\n    this.sortingTypes = [];\n    this.carbodyTypes = [];\n    this.fuelTypes = [];\n    this.transmissionTypes = [];\n    this.onDestroy$ = new ReplaySubject(1);\n  }\n  ngOnInit() {\n    this.getCarsService.getCars().pipe(takeUntil(this.onDestroy$)).subscribe(r => {\n      this.data = r;\n      this.data.forEach(el => {\n        this.binaryData = atob(el.vehicleImage);\n        this.blob = new Blob([this.binaryData]);\n        el.imgURL = this.sanitizer.bypassSecurityTrustUrl(URL.createObjectURL(this.blob));\n      });\n      debugger;\n    }, err => {\n      console.log(\"error\", err);\n    });\n    this.getFiltersService.getPricesPerDay().pipe(takeUntil(this.onDestroy$)).subscribe(r => {\n      this.priceTypes = r;\n    }, err => {\n      console.log(\"error\", err);\n    });\n    this.getFiltersService.getSortingTypes().pipe(takeUntil(this.onDestroy$)).subscribe(r => {\n      this.sortingTypes = r;\n    }, err => {\n      console.log(\"error\", err);\n    });\n    this.getFiltersService.getCarbodyTypes().pipe(takeUntil(this.onDestroy$)).subscribe(r => {\n      this.carbodyTypes = r;\n    }, err => {\n      console.log(\"error\", err);\n    });\n    this.getFiltersService.getFuelTypes().pipe(takeUntil(this.onDestroy$)).subscribe(r => {\n      this.fuelTypes = r;\n    }, err => {\n      console.log(\"error\", err);\n    });\n    this.getFiltersService.getTransmissionTypes().pipe(takeUntil(this.onDestroy$)).subscribe(r => {\n      this.transmissionTypes = r;\n    }, err => {\n      console.log(\"error\", err);\n    });\n  }\n};\nFleetComponent = __decorate([Component({\n  selector: 'fleet',\n  templateUrl: './fleet.component.html',\n  styleUrls: ['./fleet.component.css']\n})], FleetComponent);\nexport { FleetComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAA2B,eAAe;AAS5D,SAASC,aAAa,EAAEC,SAAS,QAAQ,MAAM;AAQxC,IAAMC,cAAc,GAApB,MAAMA,cAAc;EAYlBC,WAAW;IAChB,IAAI,CAACC,UAAU,CAACC,IAAI,CAAC,IAAI,CAAC;IAC1B,IAAI,CAACD,UAAU,CAACE,QAAQ,EAAE;EAC5B;EAKAC,YAAoBC,cAA8B,EAAUC,iBAAoC,EAAUC,SAAuB;IAA7G,mBAAc,GAAdF,cAAc;IAA0B,sBAAiB,GAAjBC,iBAAiB;IAA6B,cAAS,GAATC,SAAS;IAnB5G,eAAU,GAAW,oCAAoC;IACzD,SAAI,GAAc,EAAE;IAEpB,eAAU,GAAgB,EAAE;IAC5B,iBAAY,GAAkB,EAAE;IAChC,iBAAY,GAAkB,EAAE;IAChC,cAAS,GAAe,EAAE;IAC1B,sBAAiB,GAAuB,EAAE;IAEzC,eAAU,GAA2B,IAAIV,aAAa,CAAU,CAAC,CAAC;EAWzE;EAEDW,QAAQ;IACN,IAAI,CAACH,cAAc,CAACI,OAAO,EAAE,CAC1BC,IAAI,CAACZ,SAAS,CAAC,IAAI,CAACG,UAAU,CAAC,CAAC,CAChCU,SAAS,CAACC,CAAC,IAAG;MAAG,IAAI,CAACC,IAAI,GAAGD,CAAC;MAAE,IAAI,CAACC,IAAI,CAACC,OAAO,CAACC,EAAE,IAAG;QAAG,IAAI,CAACC,UAAU,GAAGC,IAAI,CAACF,EAAE,CAACG,YAAY,CAAC;QAAE,IAAI,CAACC,IAAI,GAAG,IAAIC,IAAI,CAAC,CAAC,IAAI,CAACJ,UAAU,CAAC,CAAC;QAAED,EAAE,CAACM,MAAM,GAAG,IAAI,CAACd,SAAS,CAACe,sBAAsB,CAACC,GAAG,CAACC,eAAe,CAAC,IAAI,CAACL,IAAI,CAAC,CAAC;MAAE,CAAC,CAAC;MAAE;IAAU,CAAC,EAAEM,GAAG,IAAG;MAAGC,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEF,GAAG,CAAC;IAAE,CAAC,CAAC;IACzR,IAAI,CAACnB,iBAAiB,CAACsB,eAAe,EAAE,CACrClB,IAAI,CAACZ,SAAS,CAAC,IAAI,CAACG,UAAU,CAAC,CAAC,CAChCU,SAAS,CAACC,CAAC,IAAG;MAAG,IAAI,CAACiB,UAAU,GAAGjB,CAAC;IAAE,CAAC,EAAEa,GAAG,IAAG;MAAGC,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEF,GAAG,CAAC;IAAE,CAAC,CAAC;IAClF,IAAI,CAACnB,iBAAiB,CAACwB,eAAe,EAAE,CACrCpB,IAAI,CAACZ,SAAS,CAAC,IAAI,CAACG,UAAU,CAAC,CAAC,CAChCU,SAAS,CAACC,CAAC,IAAG;MAAG,IAAI,CAACmB,YAAY,GAAGnB,CAAC;IAAE,CAAC,EAAEa,GAAG,IAAG;MAAGC,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEF,GAAG,CAAC;IAAE,CAAC,CAAC;IACpF,IAAI,CAACnB,iBAAiB,CAAC0B,eAAe,EAAE,CACrCtB,IAAI,CAACZ,SAAS,CAAC,IAAI,CAACG,UAAU,CAAC,CAAC,CAChCU,SAAS,CAACC,CAAC,IAAG;MAAG,IAAI,CAACqB,YAAY,GAAGrB,CAAC;IAAE,CAAC,EAAEa,GAAG,IAAG;MAAGC,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEF,GAAG,CAAC;IAAE,CAAC,CAAC;IACpF,IAAI,CAACnB,iBAAiB,CAAC4B,YAAY,EAAE,CAClCxB,IAAI,CAACZ,SAAS,CAAC,IAAI,CAACG,UAAU,CAAC,CAAC,CAChCU,SAAS,CAACC,CAAC,IAAG;MAAG,IAAI,CAACuB,SAAS,GAAGvB,CAAC;IAAE,CAAC,EAAEa,GAAG,IAAG;MAAGC,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEF,GAAG,CAAC;IAAE,CAAC,CAAC;IACjF,IAAI,CAACnB,iBAAiB,CAAC8B,oBAAoB,EAAE,CAC1C1B,IAAI,CAACZ,SAAS,CAAC,IAAI,CAACG,UAAU,CAAC,CAAC,CAChCU,SAAS,CAACC,CAAC,IAAG;MAAG,IAAI,CAACyB,iBAAiB,GAAGzB,CAAC;IAAE,CAAC,EAAEa,GAAG,IAAG;MAAGC,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEF,GAAG,CAAC;IAAE,CAAC,CAAC;EAC3F;CACD;AA3CY1B,cAAc,eAL1BH,SAAS,CAAC;EACT0C,QAAQ,EAAE,OAAO;EACjBC,WAAW,EAAE,wBAAwB;EACrCC,SAAS,EAAE,CAAC,uBAAuB;CACpC,CAAC,GACWzC,cAAc,CA2C1B;SA3CYA,cAAc","names":["Component","ReplaySubject","takeUntil","FleetComponent","ngOnDestroy","onDestroy$","next","complete","constructor","getCarsService","getFiltersService","sanitizer","ngOnInit","getCars","pipe","subscribe","r","data","forEach","el","binaryData","atob","vehicleImage","blob","Blob","imgURL","bypassSecurityTrustUrl","URL","createObjectURL","err","console","log","getPricesPerDay","priceTypes","getSortingTypes","sortingTypes","getCarbodyTypes","carbodyTypes","getFuelTypes","fuelTypes","getTransmissionTypes","transmissionTypes","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\przemyslaw.rutkowski\\source\\repos\\Car-Fleet-Management\\CarFleet-Project\\ClientApp\\src\\app\\fleet\\fleet.component.ts"],"sourcesContent":["import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { GetCarsService } from '../../services/get-cars.service'\r\nimport { GetFiltersService } from '../../services/get-filters.service'\r\nimport { Vehicle } from '../../models/VehicleFromBackend';\r\nimport { PriceType } from '../../models/PriceType';\r\nimport { SortingType } from '../../models/SortingType';\r\nimport { CarbodyType } from '../../models/CarbodyType';\r\nimport { FuelType } from '../../models/FuelType';\r\nimport { TransmissionType } from '../../models/TransmissionType';\r\nimport { ReplaySubject, takeUntil } from 'rxjs';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\n\r\n@Component({\r\n  selector: 'fleet',\r\n  templateUrl: './fleet.component.html',\r\n  styleUrls: ['./fleet.component.css'],\r\n})\r\nexport class FleetComponent implements OnInit, OnDestroy {\r\n  public mainBanner: string = 'assets/images/dope-cars-banner.png';\r\n  public data: Vehicle[] = [];\r\n\r\n  public priceTypes: PriceType[] = [];\r\n  public sortingTypes: SortingType[] = [];\r\n  public carbodyTypes: CarbodyType[] = [];\r\n  public fuelTypes: FuelType[] = [];\r\n  public transmissionTypes: TransmissionType[] = [];\r\n\r\n  private onDestroy$: ReplaySubject<boolean> = new ReplaySubject<boolean>(1);\r\n\r\n  public ngOnDestroy(): void {\r\n    this.onDestroy$.next(true);\r\n    this.onDestroy$.complete();\r\n  }\r\n\r\n  private binaryData: string;\r\n  private blob: Blob;\r\n\r\n  constructor(private getCarsService: GetCarsService, private getFiltersService: GetFiltersService, private sanitizer: DomSanitizer)\r\n  {}\r\n\r\n  ngOnInit() {\r\n    this.getCarsService.getCars()\r\n      .pipe(takeUntil(this.onDestroy$))\r\n      .subscribe(r => { this.data = r; this.data.forEach(el => { this.binaryData = atob(el.vehicleImage); this.blob = new Blob([this.binaryData]); el.imgURL = this.sanitizer.bypassSecurityTrustUrl(URL.createObjectURL(this.blob)); }); debugger; }, err => { console.log(\"error\", err); }); \r\n    this.getFiltersService.getPricesPerDay()\r\n      .pipe(takeUntil(this.onDestroy$))\r\n      .subscribe(r => { this.priceTypes = r; }, err => { console.log(\"error\", err); });\r\n    this.getFiltersService.getSortingTypes()\r\n      .pipe(takeUntil(this.onDestroy$))\r\n      .subscribe(r => { this.sortingTypes = r; }, err => { console.log(\"error\", err); });\r\n    this.getFiltersService.getCarbodyTypes()\r\n      .pipe(takeUntil(this.onDestroy$))\r\n      .subscribe(r => { this.carbodyTypes = r; }, err => { console.log(\"error\", err); });\r\n    this.getFiltersService.getFuelTypes()\r\n      .pipe(takeUntil(this.onDestroy$))\r\n      .subscribe(r => { this.fuelTypes = r; }, err => { console.log(\"error\", err); });\r\n    this.getFiltersService.getTransmissionTypes()\r\n      .pipe(takeUntil(this.onDestroy$))\r\n      .subscribe(r => { this.transmissionTypes = r; }, err => { console.log(\"error\", err); });\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}