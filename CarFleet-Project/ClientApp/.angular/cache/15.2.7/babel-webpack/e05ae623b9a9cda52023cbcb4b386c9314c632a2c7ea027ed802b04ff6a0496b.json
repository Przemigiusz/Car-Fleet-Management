{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { ReplaySubject } from 'rxjs/internal/ReplaySubject';\nimport { takeUntil } from 'rxjs';\nlet LoadingSpinnerComponent = class LoadingSpinnerComponent {\n  ngOnDestroy() {\n    this.onDestroy$.next(true);\n    this.onDestroy$.complete();\n  }\n  constructor(loadingSpinnerService) {\n    this.loadingSpinnerService = loadingSpinnerService;\n    this.isSpinnerHidden = false;\n    this.onDestroy$ = new ReplaySubject(1);\n  }\n  ngOnInit() {\n    this.loadingSpinnerService.isSpinnerHidden$().pipe(takeUntil(this.onDestroy$)).subscribe({\n      next: r => {\n        this.isSpinnerHidden = r;\n        console.log(r);\n      },\n      error: err => {\n        console.log(\"error\", err);\n      }\n    });\n  }\n};\nLoadingSpinnerComponent = __decorate([Component({\n  selector: 'app-loading-spinner',\n  templateUrl: './loading-spinner.component.html',\n  styleUrls: ['./loading-spinner.component.css']\n})], LoadingSpinnerComponent);\nexport { LoadingSpinnerComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAA2B,eAAe;AAE5D,SAASC,aAAa,QAAQ,6BAA6B;AAC3D,SAASC,SAAS,QAAQ,MAAM;AAOzB,IAAMC,uBAAuB,GAA7B,MAAMA,uBAAuB;EAK3BC,WAAW;IAChB,IAAI,CAACC,UAAU,CAACC,IAAI,CAAC,IAAI,CAAC;IAC1B,IAAI,CAACD,UAAU,CAACE,QAAQ,EAAE;EAC5B;EAEAC,YAAoBC,qBAA4C;IAA5C,0BAAqB,GAArBA,qBAAqB;IATlC,oBAAe,GAAG,KAAK;IAEtB,eAAU,GAA2B,IAAIR,aAAa,CAAU,CAAC,CAAC;EAON;EAEpES,QAAQ;IACN,IAAI,CAACD,qBAAqB,CAACE,gBAAgB,EAAE,CAC1CC,IAAI,CAACV,SAAS,CAAC,IAAI,CAACG,UAAU,CAAC,CAAC,CAChCQ,SAAS,CAAC;MACTP,IAAI,EAAEQ,CAAC,IAAG;QAAG,IAAI,CAACC,eAAe,GAAGD,CAAC;QAAEE,OAAO,CAACC,GAAG,CAACH,CAAC,CAAC;MAAE,CAAC;MACxDI,KAAK,EAAEC,GAAG,IAAG;QAAGH,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEE,GAAG,CAAC;MAAC;KAC3C,CAAC;EACN;CACD;AApBYhB,uBAAuB,eALnCH,SAAS,CAAC;EACToB,QAAQ,EAAE,qBAAqB;EAC/BC,WAAW,EAAE,kCAAkC;EAC/CC,SAAS,EAAE,CAAC,iCAAiC;CAC9C,CAAC,GACWnB,uBAAuB,CAoBnC;SApBYA,uBAAuB","names":["Component","ReplaySubject","takeUntil","LoadingSpinnerComponent","ngOnDestroy","onDestroy$","next","complete","constructor","loadingSpinnerService","ngOnInit","isSpinnerHidden$","pipe","subscribe","r","isSpinnerHidden","console","log","error","err","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\rutko\\source\\repos\\Car-Fleet-Management\\CarFleet-Project\\ClientApp\\src\\app\\loading-spinner\\loading-spinner.component.ts"],"sourcesContent":["import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { LoadingSpinnerService } from '../../services/loading-spinner.service'\nimport { ReplaySubject } from 'rxjs/internal/ReplaySubject';\r\nimport { takeUntil } from 'rxjs';\r\n\n@Component({\n  selector: 'app-loading-spinner',\n  templateUrl: './loading-spinner.component.html',\n  styleUrls: ['./loading-spinner.component.css']\n})\nexport class LoadingSpinnerComponent implements OnInit, OnDestroy {\n  public isSpinnerHidden = false;\n\n  private onDestroy$: ReplaySubject<boolean> = new ReplaySubject<boolean>(1);\n\n  public ngOnDestroy(): void {\n    this.onDestroy$.next(true);\n    this.onDestroy$.complete();\n  }\n\n  constructor(private loadingSpinnerService: LoadingSpinnerService) { }\n\n  ngOnInit() {\n    this.loadingSpinnerService.isSpinnerHidden$()\n      .pipe(takeUntil(this.onDestroy$))\n      .subscribe({\n        next: r => { this.isSpinnerHidden = r; console.log(r); },\n        error: err => { console.log(\"error\", err) }\n      })\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}