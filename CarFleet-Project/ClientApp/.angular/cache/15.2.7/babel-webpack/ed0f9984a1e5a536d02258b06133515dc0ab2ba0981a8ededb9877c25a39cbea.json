{"ast":null,"code":"import { Brand } from '../models/Brand';\nimport { Model } from '../models/Model';\nimport { YearOfProduction } from '../models/YearOfProduction';\nimport { TransmissionType } from '../models/TransmissionType';\nimport { Carbody } from '../models/Carbody';\nexport function createIsAnOptionValidator(dataListArray) {\n  console.log(\"validator\");\n  return control => {\n    if (dataListArray.some(el => {\n      el instanceof Brand;\n    })) {\n      if (dataListArray.some(el => {\n        el instanceof Brand && el.brandName === control.value;\n      })) {\n        return null;\n      }\n    } else if (dataListArray.some(el => {\n      el instanceof Model;\n    })) {\n      if (dataListArray.some(el => {\n        el instanceof Model && el.modelName === control.value;\n      })) {\n        return null;\n      }\n    } else if (dataListArray.some(el => {\n      el instanceof YearOfProduction;\n    })) {\n      if (dataListArray.some(el => {\n        el instanceof YearOfProduction && el.year === control.value;\n      })) {\n        return null;\n      }\n    } else if (dataListArray.some(el => {\n      el instanceof TransmissionType;\n    })) {\n      if (dataListArray.some(el => {\n        el instanceof TransmissionType && el.typeName === control.value;\n      })) {\n        return null;\n      }\n    } else if (dataListArray.some(el => {\n      el instanceof Carbody;\n    })) {\n      if (dataListArray.some(el => {\n        el instanceof Carbody && el.carbodyName === control.value;\n      })) {\n        return null;\n      }\n    }\n    return {\n      isAnOption: true\n    };\n  };\n}","map":{"version":3,"mappings":"AACA,SAASA,KAAK,QAAQ,iBAAiB;AACvC,SAASC,KAAK,QAAQ,iBAAiB;AACvC,SAASC,gBAAgB,QAAQ,4BAA4B;AAC7D,SAASC,gBAAgB,QAAQ,4BAA4B;AAC7D,SAASC,OAAO,QAAQ,mBAAmB;AAE3C,OAAM,SAAUC,yBAAyB,CAACC,aAAsF;EAC9HC,OAAO,CAACC,GAAG,CAAC,WAAW,CAAC;EACxB,OAAQC,OAAwB,IAA6B;IAC3D,IAAIH,aAAa,CAACI,IAAI,CAACC,EAAE,IAAG;MAAGA,EAAE,YAAYX,KAAK;IAAC,CAAC,CAAC,EAAE;MACrD,IAAIM,aAAa,CAACI,IAAI,CAACC,EAAE,IAAG;QAAEA,EAAE,YAAYX,KAAK,IAAIW,EAAE,CAACC,SAAS,KAAKH,OAAO,CAACI,KAAK;MAAE,CAAC,CAAC,EAAE;QACvF,OAAO,IAAI;;KAEd,MACI,IAAIP,aAAa,CAACI,IAAI,CAACC,EAAE,IAAG;MAAGA,EAAE,YAAYV,KAAK;IAAC,CAAC,CAAC,EAAE;MAC1D,IAAIK,aAAa,CAACI,IAAI,CAACC,EAAE,IAAG;QAAGA,EAAE,YAAYV,KAAK,IAAIU,EAAE,CAACG,SAAS,KAAKL,OAAO,CAACI,KAAK;MAAE,CAAC,CAAC,EAAE;QACxF,OAAO,IAAI;;KAEd,MACI,IAAIP,aAAa,CAACI,IAAI,CAACC,EAAE,IAAG;MAAGA,EAAE,YAAYT,gBAAgB;IAAC,CAAC,CAAC,EAAE;MACrE,IAAII,aAAa,CAACI,IAAI,CAACC,EAAE,IAAG;QAAGA,EAAE,YAAYT,gBAAgB,IAAIS,EAAE,CAACI,IAAI,KAAKN,OAAO,CAACI,KAAK;MAAE,CAAC,CAAC,EAAE;QAC9F,OAAO,IAAI;;KAEd,MACI,IAAIP,aAAa,CAACI,IAAI,CAACC,EAAE,IAAG;MAAGA,EAAE,YAAYR,gBAAgB;IAAC,CAAC,CAAC,EAAE;MACrE,IAAIG,aAAa,CAACI,IAAI,CAACC,EAAE,IAAG;QAAGA,EAAE,YAAYR,gBAAgB,IAAIQ,EAAE,CAACK,QAAQ,KAAKP,OAAO,CAACI,KAAK;MAAE,CAAC,CAAC,EAAE;QAClG,OAAO,IAAI;;KAEd,MACI,IAAIP,aAAa,CAACI,IAAI,CAACC,EAAE,IAAG;MAAGA,EAAE,YAAYP,OAAO;IAAC,CAAC,CAAC,EAAE;MAC5D,IAAIE,aAAa,CAACI,IAAI,CAACC,EAAE,IAAG;QAAGA,EAAE,YAAYP,OAAO,IAAIO,EAAE,CAACM,WAAW,KAAKR,OAAO,CAACI,KAAK;MAAE,CAAC,CAAC,EAAE;QAC5F,OAAO,IAAI;;;IAGf,OAAO;MAAEK,UAAU,EAAE;IAAI,CAAE;EAC7B,CAAC;AACH","names":["Brand","Model","YearOfProduction","TransmissionType","Carbody","createIsAnOptionValidator","dataListArray","console","log","control","some","el","brandName","value","modelName","year","typeName","carbodyName","isAnOption"],"sourceRoot":"","sources":["C:\\Users\\rutko\\source\\repos\\Car-Fleet-Management\\CarFleet-Project\\ClientApp\\src\\custom-validators\\is-an-option.ts"],"sourcesContent":["import { AbstractControl, ValidationErrors, ValidatorFn } from '@angular/forms';\r\nimport { Brand } from '../models/Brand';\r\nimport { Model } from '../models/Model';\r\nimport { YearOfProduction } from '../models/YearOfProduction';\r\nimport { TransmissionType } from '../models/TransmissionType';\r\nimport { Carbody } from '../models/Carbody';\r\n\r\nexport function createIsAnOptionValidator(dataListArray: Brand[] | Model[] | YearOfProduction[] | TransmissionType[] | Carbody[]): ValidatorFn {\r\n  console.log(\"validator\")\r\n  return (control: AbstractControl): ValidationErrors | null => {\r\n    if (dataListArray.some(el => { el instanceof Brand })) {\r\n      if (dataListArray.some(el => {el instanceof Brand && el.brandName === control.value; })) {\r\n        return null;\r\n      }\r\n    }\r\n    else if (dataListArray.some(el => { el instanceof Model })) {\r\n      if (dataListArray.some(el => { el instanceof Model && el.modelName === control.value; })) {\r\n        return null;\r\n      }\r\n    }\r\n    else if (dataListArray.some(el => { el instanceof YearOfProduction })) {\r\n      if (dataListArray.some(el => { el instanceof YearOfProduction && el.year === control.value; })) {\r\n        return null;\r\n      }\r\n    }\r\n    else if (dataListArray.some(el => { el instanceof TransmissionType })) {\r\n      if (dataListArray.some(el => { el instanceof TransmissionType && el.typeName === control.value; })) {\r\n        return null;\r\n      }\r\n    }\r\n    else if (dataListArray.some(el => { el instanceof Carbody })) {\r\n      if (dataListArray.some(el => { el instanceof Carbody && el.carbodyName === control.value; })) {\r\n        return null;\r\n      }\r\n    }\r\n    return { isAnOption: true };\r\n  }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}