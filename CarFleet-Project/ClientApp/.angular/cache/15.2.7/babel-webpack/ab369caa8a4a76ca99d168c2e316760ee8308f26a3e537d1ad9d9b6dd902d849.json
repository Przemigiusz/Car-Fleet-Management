{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Vehicle } from '../../models/Vehicle';\nimport { FormGroup, Validators, FormControl } from '@angular/forms';\nlet NewCarComponent = class NewCarComponent {\n  updateValue(equipmentItem) {\n    if (equipmentItem.isChecked === false) {\n      equipmentItem.isChecked = true;\n    } else {\n      equipmentItem.isChecked = false;\n    }\n  }\n  constructor(addCarService, formBuilder) {\n    this.addCarService = addCarService;\n    this.formBuilder = formBuilder;\n    this.isExpanded = false;\n    this.addCarForm = new FormGroup({});\n    this.equipment = [{\n      name: \"Klimatyzacja\",\n      isChecked: false,\n      idFor: \"AirConditioning\"\n    }, {\n      name: \"System Multimedialny\",\n      isChecked: false,\n      idFor: \"MultimediaSystem\"\n    }, {\n      name: \"Bluetooth/USB\",\n      isChecked: false,\n      idFor: \"BluetoothUSB\"\n    }, {\n      name: \"ABS\",\n      isChecked: false,\n      idFor: \"ABS\"\n    }, {\n      name: \"ESP\",\n      isChecked: false,\n      idFor: \"ESP\"\n    }, {\n      name: \"Czujniki Cofania\",\n      isChecked: false,\n      idFor: \"ReverseSensors\"\n    }, {\n      name: \"Ogrzewane Fotele\",\n      isChecked: false,\n      idFor: \"HeatedSeats\"\n    }, {\n      name: \"Cruise Control \",\n      isChecked: false,\n      idFor: \"CruiseControl\"\n    }, {\n      name: \"Kamera Cofania\",\n      isChecked: false,\n      idFor: \"ReverseCamera\"\n    }];\n    this.isChecked = new FormControl();\n  }\n  ngOnInit() {\n    this.initForm();\n  }\n  initForm() {\n    this.addCarForm = this.formBuilder.group({\n      brand: ['', Validators.required],\n      model: ['', Validators.required],\n      yearOfProduction: ['', Validators.required],\n      mileage: ['', Validators.required],\n      fuelType: ['', Validators.required],\n      doorsAmount: ['', Validators.required],\n      carBodyType: ['', Validators.required]\n    });\n  }\n  submitForm() {\n    if (this.addCarForm.valid) {\n      console.log(\"test\");\n      const formData = this.addCarForm.value;\n      const newVehicle = new Vehicle();\n      newVehicle.brand = formData.brand;\n      newVehicle.model = formData.model;\n      newVehicle.yearOfProduction = formData.yearOfProduction;\n      newVehicle.mileage = formData.mileage;\n      newVehicle.fuelType = formData.fuelType;\n      newVehicle.doorsAmount = formData.doorsAmount;\n      newVehicle.carBodyType = formData.carBodyType;\n      newVehicle.equipment = formData.equipment;\n      this.addCarService.addCar(newVehicle).subscribe(r => {\n        debugger;\n      },\n      //r => { debugger } console.log(\"sukces\")\n      //r => { debugger } console.log(\"sukces\")\n      err => {\n        console.log(\"błąd\");\n      });\n    } else {\n      console.log(\"Form is not valid!!!\");\n    }\n  }\n  collapse() {\n    this.isExpanded = false;\n  }\n  toggle() {\n    this.isExpanded = !this.isExpanded;\n  }\n};\nNewCarComponent = __decorate([Component({\n  selector: 'new-car',\n  templateUrl: './new-car.component.html',\n  styleUrls: ['./new-car.component.css']\n})], NewCarComponent);\nexport { NewCarComponent };","map":{"version":3,"mappings":"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","names":["Component","Vehicle","FormGroup","Validators","FormControl","NewCarComponent","updateValue","equipmentItem","isChecked","constructor","addCarService","formBuilder","name","idFor","ngOnInit","initForm","addCarForm","group","brand","required","model","yearOfProduction","mileage","fuelType","doorsAmount","carBodyType","submitForm","valid","console","log","formData","value","newVehicle","equipment","addCar","subscribe","r","err","collapse","isExpanded","toggle","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\przemyslaw.rutkowski\\source\\repos\\Car-Fleet-Management\\CarFleet-Project\\ClientApp\\src\\app\\new-car-form\\new-car.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { AddCarService } from '../../services/add-car.service';\r\nimport { AddCarInterface } from '../../interfaces/add-car.interface';\r\nimport { Vehicle } from '../../models/Vehicle';\r\nimport { Equipment } from '../../models/Equipment';\r\nimport { FormBuilder, FormGroup, Validators, FormControl } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'new-car',\r\n  templateUrl: './new-car.component.html',\r\n  styleUrls: ['./new-car.component.css'],\r\n})\r\nexport class NewCarComponent implements OnInit {\r\n  isExpanded = false;\r\n  addCarForm: FormGroup = new FormGroup({});\r\n  equipment: any = \r\n    [\r\n      { name: \"Klimatyzacja\", isChecked: false, idFor: \"AirConditioning\"},\r\n      { name: \"System Multimedialny\", isChecked: false, idFor: \"MultimediaSystem\"},\r\n      { name: \"Bluetooth/USB\", isChecked: false, idFor: \"BluetoothUSB\"},\r\n      { name: \"ABS\", isChecked: false, idFor: \"ABS\" },\r\n      { name: \"ESP\", isChecked: false, idFor: \"ESP\" },\r\n      { name: \"Czujniki Cofania\", isChecked: false, idFor: \"ReverseSensors\"},\r\n      { name: \"Ogrzewane Fotele\", isChecked: false, idFor: \"HeatedSeats\"},\r\n      { name: \"Cruise Control \", isChecked: false, idFor: \"CruiseControl\"},\r\n      { name: \"Kamera Cofania\", isChecked: false, idFor: \"ReverseCamera\"},\r\n    ];\r\n  isChecked: FormControl;\r\n\r\n  updateValue(equipmentItem: any) {\r\n    if (equipmentItem.isChecked === false) {\r\n      equipmentItem.isChecked = true;\r\n    } else {\r\n      equipmentItem.isChecked = false;\r\n    }\r\n };\r\n\r\n  constructor(private addCarService: AddCarService,\r\n    private formBuilder: FormBuilder) {\r\n    this.isChecked = new FormControl();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.initForm();\r\n  };\r\n\r\n  initForm() {\r\n    this.addCarForm = this.formBuilder.group({\r\n      brand: ['', Validators.required],\r\n      model: ['', Validators.required],\r\n      yearOfProduction: ['', Validators.required],\r\n      mileage: ['', Validators.required],\r\n      fuelType: ['', Validators.required],\r\n      doorsAmount: ['', Validators.required],\r\n      carBodyType: ['', Validators.required],\r\n    })\r\n  }\r\n\r\n  submitForm() {\r\n    if (this.addCarForm.valid) {\r\n      console.log(\"test\");\r\n      const formData: AddCarInterface = this.addCarForm.value;\r\n      const newVehicle: Vehicle = new Vehicle();\r\n      newVehicle.brand = formData.brand;\r\n      newVehicle.model = formData.model;\r\n      newVehicle.yearOfProduction = formData.yearOfProduction;\r\n      newVehicle.mileage = formData.mileage;\r\n      newVehicle.fuelType = formData.fuelType;\r\n      newVehicle.doorsAmount = formData.doorsAmount;\r\n      newVehicle.carBodyType = formData.carBodyType;\r\n      newVehicle.equipment = formData.equipment;\r\n      this.addCarService.addCar(newVehicle).subscribe(\r\n        r => { debugger }, //r => { debugger } console.log(\"sukces\")\r\n        err => { console.log(\"błąd\") });\r\n    }\r\n    else {\r\n      console.log(\"Form is not valid!!!\");\r\n    }\r\n    \r\n  }\r\n\r\n  collapse() {\r\n    this.isExpanded = false;\r\n  }\r\n\r\n  toggle() {\r\n    this.isExpanded = !this.isExpanded;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}